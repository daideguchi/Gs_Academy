{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport { skillReducer, initialState, actionTypes } from \"../reducers/skillReducer\";\nexport const useSkills = () => {\n  _s();\n\n  const [state, dispatch] = useReducer(skillReducer, initialState);\n  useEffect(() => {\n    dispatch({\n      type: actionTypes.fetch\n    });\n    axios.get(\"https://api.github.com/daideguchi/repos\").then(response => {\n      const languageList = response.data.map(res => res.language);\n      const countedLanguageList = generateLanguageCountObj(languageList);\n      dispatch({\n        type: actionTypes.success,\n        payload: {\n          languageList: countedLanguageList\n        }\n      });\n    }).catch(() => {\n      dispatch({\n        type: actionTypes.error\n      });\n    });\n  }, []);\n\n  const generateLanguageCountObj = allLanguageList => {\n    const notNullLanguageList = allLanguageList.filter(language => language != null);\n    const uniqueLanguageList = [...new Set(notNullLanguageList)];\n    return uniqueLanguageList.map(item => {\n      return {\n        language: item,\n        count: allLanguageList.filter(language => language === item).length\n      };\n    });\n  };\n\n  const converseCountToPercentage = count => {\n    if (count > 10) {\n      return 100;\n    }\n\n    return count * 10;\n  };\n\n  const sortedLanguageList = () => state.languageList.sort((firstLang, nextLang) => nextLang.count - firstLang.count);\n\n  return [sortedLanguageList, state.requestState, converseCountToPercentage];\n};\n\n_s(useSkills, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");","map":{"version":3,"sources":["/Users/daideguchi/Desktop/G's _Academy/課題/api_work/react-portfolio-site/src/customHooks/useSkills.js"],"names":["useEffect","useReducer","axios","skillReducer","initialState","actionTypes","useSkills","state","dispatch","type","fetch","get","then","response","languageList","data","map","res","language","countedLanguageList","generateLanguageCountObj","success","payload","catch","error","allLanguageList","notNullLanguageList","filter","uniqueLanguageList","Set","item","count","length","converseCountToPercentage","sortedLanguageList","sort","firstLang","nextLang","requestState"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,UAApB,QAAsC,OAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACEC,YADF,EAEEC,YAFF,EAGEC,WAHF,QAIO,0BAJP;AAMA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACE,YAAD,EAAeC,YAAf,CAApC;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,WAAW,CAACK;AAApB,KAAD,CAAR;AACAR,IAAAA,KAAK,CACFS,GADH,CACO,yCADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAMC,YAAY,GAAGD,QAAQ,CAACE,IAAT,CAAcC,GAAd,CAAmBC,GAAD,IAASA,GAAG,CAACC,QAA/B,CAArB;AACA,YAAMC,mBAAmB,GAAGC,wBAAwB,CAACN,YAAD,CAApD;AACAN,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEJ,WAAW,CAACgB,OADX;AAEPC,QAAAA,OAAO,EAAE;AAAER,UAAAA,YAAY,EAAEK;AAAhB;AAFF,OAAD,CAAR;AAID,KATH,EAUGI,KAVH,CAUS,MAAM;AACXf,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,WAAW,CAACmB;AAApB,OAAD,CAAR;AACD,KAZH;AAaD,GAfQ,EAeN,EAfM,CAAT;;AAiBA,QAAMJ,wBAAwB,GAAIK,eAAD,IAAqB;AACpD,UAAMC,mBAAmB,GAAGD,eAAe,CAACE,MAAhB,CACzBT,QAAD,IAAcA,QAAQ,IAAI,IADA,CAA5B;AAGA,UAAMU,kBAAkB,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQH,mBAAR,CAAJ,CAA3B;AAEA,WAAOE,kBAAkB,CAACZ,GAAnB,CAAwBc,IAAD,IAAU;AACtC,aAAO;AACLZ,QAAAA,QAAQ,EAAEY,IADL;AAELC,QAAAA,KAAK,EAAEN,eAAe,CAACE,MAAhB,CAAwBT,QAAD,IAAcA,QAAQ,KAAKY,IAAlD,EAAwDE;AAF1D,OAAP;AAID,KALM,CAAP;AAMD,GAZD;;AAcA,QAAMC,yBAAyB,GAAIF,KAAD,IAAW;AAC3C,QAAIA,KAAK,GAAG,EAAZ,EAAgB;AACd,aAAO,GAAP;AACD;;AACD,WAAOA,KAAK,GAAG,EAAf;AACD,GALD;;AAOA,QAAMG,kBAAkB,GAAG,MACzB3B,KAAK,CAACO,YAAN,CAAmBqB,IAAnB,CACE,CAACC,SAAD,EAAYC,QAAZ,KAAyBA,QAAQ,CAACN,KAAT,GAAiBK,SAAS,CAACL,KADtD,CADF;;AAII,SAAO,CACLG,kBADK,EAEL3B,KAAK,CAAC+B,YAFD,EAGLL,yBAHK,CAAP;AAML,CAnDM;;GAAM3B,S","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nimport {\n  skillReducer,\n  initialState,\n  actionTypes,\n} from \"../reducers/skillReducer\";\n\nexport const useSkills = () => {\n  const [state, dispatch] = useReducer(skillReducer, initialState);\n\n  useEffect(() => {\n    dispatch({ type: actionTypes.fetch });\n    axios\n      .get(\"https://api.github.com/daideguchi/repos\")\n      .then((response) => {\n        const languageList = response.data.map((res) => res.language);\n        const countedLanguageList = generateLanguageCountObj(languageList);\n        dispatch({\n          type: actionTypes.success,\n          payload: { languageList: countedLanguageList },\n        });\n      })\n      .catch(() => {\n        dispatch({ type: actionTypes.error });\n      });\n  }, []);\n\n  const generateLanguageCountObj = (allLanguageList) => {\n    const notNullLanguageList = allLanguageList.filter(\n      (language) => language != null\n    );\n    const uniqueLanguageList = [...new Set(notNullLanguageList)];\n\n    return uniqueLanguageList.map((item) => {\n      return {\n        language: item,\n        count: allLanguageList.filter((language) => language === item).length,\n      };\n    });\n  };\n\n  const converseCountToPercentage = (count) => {\n    if (count > 10) {\n      return 100;\n    }\n    return count * 10;\n  };\n\n  const sortedLanguageList = () =>\n    state.languageList.sort(\n      (firstLang, nextLang) => nextLang.count - firstLang.count\n      );\n      return [\n        sortedLanguageList,\n        state.requestState,\n        converseCountToPercentage,\n      ];\n\n};\n"]},"metadata":{},"sourceType":"module"}